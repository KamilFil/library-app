/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as SignInIndexImport } from './routes/sign-in/index';
import { Route as SignInIdImport } from './routes/sign-in/$id';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const SignInIndexRoute = SignInIndexImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => rootRoute,
} as any);

const SignInIdRoute = SignInIdImport.update({
  id: '/sign-in/$id',
  path: '/sign-in/$id',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/sign-in/$id': {
      id: '/sign-in/$id';
      path: '/sign-in/$id';
      fullPath: '/sign-in/$id';
      preLoaderRoute: typeof SignInIdImport;
      parentRoute: typeof rootRoute;
    };
    '/sign-in/': {
      id: '/sign-in/';
      path: '/sign-in';
      fullPath: '/sign-in';
      preLoaderRoute: typeof SignInIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/sign-in/$id': typeof SignInIdRoute;
  '/sign-in': typeof SignInIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/sign-in/$id': typeof SignInIdRoute;
  '/sign-in': typeof SignInIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/sign-in/$id': typeof SignInIdRoute;
  '/sign-in/': typeof SignInIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/sign-in/$id' | '/sign-in';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/sign-in/$id' | '/sign-in';
  id: '__root__' | '/' | '/sign-in/$id' | '/sign-in/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  SignInIdRoute: typeof SignInIdRoute;
  SignInIndexRoute: typeof SignInIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignInIdRoute: SignInIdRoute,
  SignInIndexRoute: SignInIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/sign-in/$id",
        "/sign-in/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/sign-in/$id": {
      "filePath": "sign-in/$id.tsx"
    },
    "/sign-in/": {
      "filePath": "sign-in/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

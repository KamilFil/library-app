/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as SignInIndexImport } from './routes/sign-in/index';
import { Route as LogsIndexImport } from './routes/logs/index';
import { Route as BooksIndexImport } from './routes/books/index';
import { Route as BooksBookIdImport } from './routes/books/$bookId';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const SignInIndexRoute = SignInIndexImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => rootRoute,
} as any);

const LogsIndexRoute = LogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => rootRoute,
} as any);

const BooksIndexRoute = BooksIndexImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => rootRoute,
} as any);

const BooksBookIdRoute = BooksBookIdImport.update({
  id: '/books/$bookId',
  path: '/books/$bookId',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/books/$bookId': {
      id: '/books/$bookId';
      path: '/books/$bookId';
      fullPath: '/books/$bookId';
      preLoaderRoute: typeof BooksBookIdImport;
      parentRoute: typeof rootRoute;
    };
    '/books/': {
      id: '/books/';
      path: '/books';
      fullPath: '/books';
      preLoaderRoute: typeof BooksIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/logs/': {
      id: '/logs/';
      path: '/logs';
      fullPath: '/logs';
      preLoaderRoute: typeof LogsIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/sign-in/': {
      id: '/sign-in/';
      path: '/sign-in';
      fullPath: '/sign-in';
      preLoaderRoute: typeof SignInIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/books/$bookId': typeof BooksBookIdRoute;
  '/books': typeof BooksIndexRoute;
  '/logs': typeof LogsIndexRoute;
  '/sign-in': typeof SignInIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/books/$bookId': typeof BooksBookIdRoute;
  '/books': typeof BooksIndexRoute;
  '/logs': typeof LogsIndexRoute;
  '/sign-in': typeof SignInIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/books/$bookId': typeof BooksBookIdRoute;
  '/books/': typeof BooksIndexRoute;
  '/logs/': typeof LogsIndexRoute;
  '/sign-in/': typeof SignInIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/books/$bookId' | '/books' | '/logs' | '/sign-in';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/books/$bookId' | '/books' | '/logs' | '/sign-in';
  id: '__root__' | '/' | '/books/$bookId' | '/books/' | '/logs/' | '/sign-in/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BooksBookIdRoute: typeof BooksBookIdRoute;
  BooksIndexRoute: typeof BooksIndexRoute;
  LogsIndexRoute: typeof LogsIndexRoute;
  SignInIndexRoute: typeof SignInIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BooksBookIdRoute: BooksBookIdRoute,
  BooksIndexRoute: BooksIndexRoute,
  LogsIndexRoute: LogsIndexRoute,
  SignInIndexRoute: SignInIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/books/$bookId",
        "/books/",
        "/logs/",
        "/sign-in/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/books/$bookId": {
      "filePath": "books/$bookId.tsx"
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/logs/": {
      "filePath": "logs/index.tsx"
    },
    "/sign-in/": {
      "filePath": "sign-in/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
